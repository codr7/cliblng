(defpackage struct
  (:use cl)
  (:import-from util sym while)
  (:export clone define init root))

(in-package struct)

(defstruct (root (:constructor struct-root)))

(defmethod init (x))

(defmethod clone ((x root))
  (copy-structure x))

(defun _ (s)
  (and (symbolp s) (string= (symbol-name s) "_")))

(defmacro define (name super &body slots)
  (let ((prefix (sym '$ name))
	slot-readers slot-writers)
    `(progn
       (defstruct (,name (:constructor ,prefix)
			 (:copier nil)
			 (:conc-name ,(sym prefix '-))
			 (:include ,(if (_ super) 'root super)))
	 ,@(mapcar (lambda (f)
		     (let ((slot-name (pop f))
			   (slot-type (pop f))
			   (slot-init 'nil))
		       (while f
			 (ecase (pop f)
			   (:init (setf slot-init (pop f)))
			   (:read (let ((r (pop f)))
				    (push (cons (if (_ r) slot-name r) slot-name) slot-readers)))
			   (:write (let ((w (pop f)))
				    (push (cons (if (_ w) slot-name w) slot-name) slot-writers)))))
		       `(,slot-name ,slot-init :type ,(if (_ slot-type) 't slot-type))))
	    slots))
       (let ((prev (fdefinition ',prefix)))
	 (fmakunbound ',prefix)
	 (defun ,prefix (&rest args)
	   (let ((x (apply prev args)))
	     (init x)
	     x)))
       ,@(mapcar (lambda (f)
		   `(defmethod ,(first f) ((x ,name))
		      (,(sym prefix '- (rest f)) x)))
		 slot-readers)
       ,@(mapcar (lambda (f)
		   `(defmethod (setf ,(first f)) (v (x ,name))
		      (setf (,(sym prefix '- (rest f)) x) v)))
		 slot-writers))))
